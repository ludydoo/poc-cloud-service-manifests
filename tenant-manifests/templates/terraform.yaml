apiVersion: v1
kind: ServiceAccount
metadata:
  name: terraform
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: terraform
rules:
  - apiGroups: [ "" ]
    resources: [ "secrets" ]
    verbs: [ "get", "list", "create" ]
  - apiGroups: [ "security.openshift.io" ]
    resources: [ "securitycontextconstraints" ]
    verbs: [ "use" ]
    resourceNames:
      - nonroot-v2
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: terraform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: terraform
subjects:
  - kind: ServiceAccount
    name: terraform
---
apiVersion: batch/v1
kind: Job
metadata:
  name: terraform
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
spec:
  template:
    spec:
      backoffLimit: 4
      restartPolicy: OnFailure
      serviceAccountName: terraform
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        runAsNonRoot: true
      containers:
        - name: terraform
          image: hashicorp/terraform:1.8.5
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
              secretKeyRef:
                name: terraform-state-secret
                key: ACCESS_KEY
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: terraform-state-secret
                  key: SECRET_KEY
            - name: AWS_EC2_METADATA_DISABLED
              value: "true"
            - name: AWS_ENDPOINT_URL_S3
              value: "https://minio.terraform-state-store.svc.cluster.local"
            - name: BUCKET
              value: "terraform-state"
            - name: AWS_DEFAULT_REGION
              value: "us-east-1"
            - name: KEY
              value: "terraform.tfstate"
            - name: SKIP_REGION_VALIDATION
              value: "true"
            - name: SKIP_CREDENTIALS_VALIDATION
              value: "true"
            - name: SKIP_REQUESTING_ACCOUNT_ID
              value: "true"
            - name: SKIP_METADATA_API_CHECK
              value: "true"
            - name: USE_PATH_STYLE
              value: "true"

          command: [ "sh", "-c" ]
          args:
            - |
              
              printenv
              
              # Copy the manifests to the terraform directory
              # Otherwise readOnlyRootFilesystem will prevent terraform from writing to the directory
              echo "Copying manifests to /terraform"
              cp -Lr /manifests/* /terraform
              ls -al /terraform
              chmod -R 777 /terraform/*
              
              echo "Initializing terraform"
              cd /terraform && \
              terraform init \
                -backend-config="bucket=${BUCKET}" \
                -backend-config="key=${KEY}" \
                -backend-config="skip_region_validation=${SKIP_REGION_VALIDATION}" \
                -backend-config="skip_credentials_validation=${SKIP_CREDENTIALS_VALIDATION}" \
                -backend-config="skip_requesting_account_id=${SKIP_REQUESTING_ACCOUNT_ID}" \
                -backend-config="skip_metadata_api_check=${SKIP_METADATA_API_CHECK}" \
                -backend-config="use_path_style=${USE_PATH_STYLE}" && \            
              terraform apply -auto-approve

          volumeMounts:
            - name: terraform
              mountPath: /terraform
            - name: terraform-manifests
              mountPath: /manifests
              readOnly: true
      volumes:
        - name: terraform
          emptyDir: { }
        - name: terraform-manifests
          configMap:
            name: terraform-manifests