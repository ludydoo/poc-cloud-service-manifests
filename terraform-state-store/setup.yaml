apiVersion: v1
kind: ServiceAccount
metadata:
  name: terraform-state-store-init
  namespace: terraform-state-store
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: terraform-state-store-init
  namespace: terraform-state-store
rules:
  - apiGroups: [ "" ]
    resources: [ "secrets" ]
    verbs: [ "create", "get", "update" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: terraform-state-store-init
  namespace: terraform-state-store
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: terraform-state-store-init
subjects:
  - kind: ServiceAccount
    name: terraform-state-store-init
    namespace: terraform-state-store
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: terraform-state-store-init
  namespace: terraform-state-store
data:
  terraform-state-store-init.sh: |
    #!/bin/bash    
    
    console_access_key=$(openssl rand -hex 32)
    console_secret_key=$(openssl rand -hex 32)
    access_key=$(openssl rand -hex 32)
    secret_key=$(openssl rand -hex 32)
    root_user=$(openssl rand -hex 32)
    root_password=$(openssl rand -hex 32)
    
    kubectl get secret terraform-state-store-user-0 -n ${NAMESPACE} || \
    kubectl create secret generic terraform-state-store-user-0 \
      -n ${NAMESPACE} \
      --from-literal=CONSOLE_ACCESS_KEY="${console_access_key}" \
      --from-literal=CONSOLE_SECRET_KEY="${console_secret_key}"
    
    kubectl get secret terraform-state-store-secret -n ${NAMESPACE} || \
    kubectl create secret generic terraform-state-store-secret \
      -n ${NAMESPACE} \
      --from-literal=ACCESS_KEY="${access_key}" \
      --from-literal=SECRET_KEY="${secret_key}"
    
    kubectl get secret terraform-state-store-env-configuration -n ${NAMESPACE} || \
    kubectl create secret generic terraform-state-store-env-configuration \
      -n ${NAMESPACE} \
      --from-literal=config.env="export MINIO_BROWSER=\"on\"
    export MINIO_ROOT_USER=\"${root_user}\"
    export MINIO_ROOT_PASSWORD=\"${root_password}\""
---
apiVersion: batch/v1
kind: Job
metadata:
  name: terraform-state-store-init
  namespace: terraform-state-store
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
spec:
  template:
    spec:
      restartPolicy: OnFailure
      volumes:
        - name: terraform-state-store-init
          configMap:
            name: terraform-state-store-init
            defaultMode: 0777
        - name: workdir
          emptyDir: { }
      serviceAccountName: terraform-state-store-init
      containers:
        - name: terraform-state-store-init
          image: bitnami/kubectl:latest
          volumeMounts:
            - mountPath: /scripts
              name: terraform-state-store-init
            - mountPath: /workdir
              name: workdir
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command: [ "/bin/bash", "-c" ]
          args:
            - |
              cp /scripts/terraform-state-store-init.sh /workdir/terraform-state-store-init.sh
              chmod +x /workdir/terraform-state-store-init.sh
              /workdir/terraform-state-store-init.sh
