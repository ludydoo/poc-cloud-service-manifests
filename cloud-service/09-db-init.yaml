apiVersion: v1
kind: ServiceAccount
metadata:
  name: db-init
  namespace: cloud-service
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: db-init
  namespace: cloud-service
rules:
  - apiGroups: [ "" ]
    resources: [ "secrets" ]
    verbs: [ "create", "get", "update" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: db-init
  namespace: cloud-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: db-init
subjects:
  - kind: ServiceAccount
    name: db-init
    namespace: cloud-service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-init
  namespace: cloud-service
data:
  db-init.sh: |
    #!/bin/bash    
    # Script to create the db-secret if it doesn't exist
    db_secret=$(openssl rand -hex 64)    
    db_user="dbuser-$(openssl rand -hex 4)"
    db="cloud-service"
    if kubectl get secret db-secret -n cloud-service; then
        echo "Secret already exists"
        exit 0
    fi    
    kubectl create secret generic db-secret \
      -n ${NAMESPACE} \
      --from-literal=POSTGRES_PASSWORD="${db_secret}" \
      --from-literal=POSTGRES_USER="${db_user}" \
      --from-literal=POSTGRES_DB="${db}" \
      --from-literal=DB_DSN="postgresql://${db_user}:${db_secret}@db:5432/${db}"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init
  namespace: cloud-service
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
spec:
  template:
    spec:
      restartPolicy: OnFailure
      volumes:
        - name: db-init
          configMap:
            name: db-init
            defaultMode: 0777
        - name: workdir
          emptyDir: { }
      serviceAccountName: db-init
      containers:
        - name: db-init
          image: bitnami/kubectl:latest
          volumeMounts:
            - mountPath: /scripts
              name: db-init
            - mountPath: /workdir
              name: workdir
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command: [ "/bin/bash", "-c" ]
          args:
            - |
              cp /scripts/db-init.sh /workdir/db-init.sh
              chmod +x /workdir/db-init.sh
              /workdir/db-init.sh
