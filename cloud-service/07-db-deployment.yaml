apiVersion: v1
kind: ServiceAccount
metadata:
  name: db
  namespace: cloud-service
  labels:
    app: db
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: db
  namespace: cloud-service
rules:
  # Use scc
  - apiGroups: [ "security.openshift.io" ]
    resources: [ "securitycontextconstraints" ]
    verbs: [ "use" ]
    resourceNames:
      - nonroot-v2
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: db
  namespace: cloud-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: db
subjects:
  - kind: ServiceAccount
    name: db
    namespace: cloud-service
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: db
  namespace: cloud-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
        deployment: db
    spec:
      serviceAccountName: db
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
      containers:
        - name: db
          image: postgres:16
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          envFrom:
            - secretRef:
                name: db-secret
          ports:
            - containerPort: 5432
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: data
              readOnly: false
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: db-data